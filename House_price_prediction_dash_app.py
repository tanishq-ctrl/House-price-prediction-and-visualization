{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "42962475-4f62-47e5-90af-9d52af8f7ef3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x16ae17da0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import dash\n",
    "from dash import dcc, html, Input, Output\n",
    "import plotly.express as px\n",
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "data_path = \"/Users/tanishq/Desktop/Projects/home-data-for-ml-course/train.csv\"\n",
    "data = pd.read_csv(data_path)\n",
    "\n",
    "# Prepare data for the visualizations\n",
    "data['LotFrontageAvailable'] = data['LotFrontage'].notnull().map({True: 'Available', False: 'Missing'})\n",
    "data['Renovated'] = data['YearBuilt'] != data['YearRemodAdd']\n",
    "\n",
    "# Sample latitude and longitude data for neighborhoods (mock data for visualization purposes)\n",
    "# Replace this with actual geospatial data if available\n",
    "data['Latitude'] = data['Neighborhood'].map({\n",
    "    'CollgCr': 42.025, 'Veenker': 42.030, 'Crawfor': 42.022,\n",
    "    'NoRidge': 42.050, 'Mitchel': 42.018, 'Somerst': 42.031,\n",
    "    'NWAmes': 42.040, 'OldTown': 42.016, 'BrkSide': 42.012,\n",
    "    'Sawyer': 42.025, 'IDOTRR': 42.007, 'MeadowV': 42.010,\n",
    "    'Edwards': 42.017, 'Timber': 42.042, 'Gilbert': 42.080,\n",
    "    'StoneBr': 42.055, 'ClearCr': 42.045, 'NPkVill': 42.036,\n",
    "    'Blmngtn': 42.062, 'Blueste': 42.065, 'SawyerW': 42.028,\n",
    "    'SWISU': 42.013, 'NridgHt': 42.054, 'NAmes': 42.053,\n",
    "    'Names': 42.050, 'Brookside': 42.015, 'Other': 42.000\n",
    "})\n",
    "data['Longitude'] = data['Neighborhood'].map({\n",
    "    'CollgCr': -93.655, 'Veenker': -93.650, 'Crawfor': -93.670,\n",
    "    'NoRidge': -93.635, 'Mitchel': -93.685, 'Somerst': -93.645,\n",
    "    'NWAmes': -93.680, 'OldTown': -93.630, 'BrkSide': -93.620,\n",
    "    'Sawyer': -93.625, 'IDOTRR': -93.610, 'MeadowV': -93.600,\n",
    "    'Edwards': -93.640, 'Timber': -93.690, 'Gilbert': -93.750,\n",
    "    'StoneBr': -93.630, 'ClearCr': -93.670, 'NPkVill': -93.665,\n",
    "    'Blmngtn': -93.690, 'Blueste': -93.700, 'SawyerW': -93.645,\n",
    "    'SWISU': -93.620, 'NridgHt': -93.640, 'NAmes': -93.675,\n",
    "    'Names': -93.660, 'Brookside': -93.615, 'Other': -93.590\n",
    "})\n",
    "\n",
    "# Initialize the app\n",
    "app = dash.Dash(__name__)\n",
    "app.title = \"Real Estate Dashboard\"\n",
    "\n",
    "# Layout\n",
    "app.layout = html.Div([\n",
    "    html.H1(\"Real Estate Interactive Dashboard\", style={\"textAlign\": \"center\", \"color\": \"#4B0082\"}),\n",
    "\n",
    "    # SalePrice Over Time Heatmap\n",
    "    html.Div([\n",
    "        html.H2(\"SalePrice Over Time (Year vs. Month)\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Graph(id=\"heatmap\"),\n",
    "    ]),\n",
    "\n",
    "    # Living Area vs. SalePrice\n",
    "    html.Div([\n",
    "        html.H2(\"Living Area vs. SalePrice\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Dropdown(\n",
    "            id=\"neighborhood_filter\",\n",
    "            options=[{\"label\": n, \"value\": n} for n in data['Neighborhood'].unique()],\n",
    "            placeholder=\"Select a Neighborhood\",\n",
    "            multi=True\n",
    "        ),\n",
    "        dcc.Graph(id=\"scatter_plot\"),\n",
    "    ]),\n",
    "\n",
    "    # Overall Quality vs. SalePrice\n",
    "    html.Div([\n",
    "        html.H2(\"Overall Quality vs. SalePrice\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Slider(\n",
    "            id=\"year_filter\",\n",
    "            min=data['YearBuilt'].min(),\n",
    "            max=data['YearBuilt'].max(),\n",
    "            step=1,\n",
    "            value=data['YearBuilt'].max(),\n",
    "            marks={str(year): str(year) for year in range(data['YearBuilt'].min(), data['YearBuilt'].max()+1, 10)},\n",
    "        ),\n",
    "        dcc.Graph(id=\"boxplot\"),\n",
    "    ]),\n",
    "\n",
    "    # Average SalePrice by Neighborhood\n",
    "    html.Div([\n",
    "        html.H2(\"Average SalePrice by Neighborhood\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Graph(id=\"neighborhood_bar_chart\"),\n",
    "    ]),\n",
    "\n",
    "    # SalePrice Distribution by Garage Type\n",
    "    html.Div([\n",
    "        html.H2(\"SalePrice Distribution by Garage Type\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Graph(id=\"garage_boxplot\"),\n",
    "    ]),\n",
    "\n",
    "    # SalePrice Distribution by Building Type\n",
    "    html.Div([\n",
    "        html.H2(\"SalePrice Distribution by Building Type\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Graph(id=\"building_type_boxplot\"),\n",
    "    ]),\n",
    "\n",
    "    # SalePrice by House Style\n",
    "    html.Div([\n",
    "        html.H2(\"SalePrice by House Style\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Graph(id=\"house_style_boxplot\"),\n",
    "    ]),\n",
    "\n",
    "    # Price Impact of Renovations\n",
    "    html.Div([\n",
    "        html.H2(\"Price Impact of Renovations\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Graph(id=\"renovation_price_impact\"),\n",
    "    ]),\n",
    "\n",
    "    # Neighborhood Map\n",
    "    html.Div([\n",
    "        html.H2(\"Neighborhood Map\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Graph(id=\"neighborhood_map\"),\n",
    "    ]),\n",
    "\n",
    "    # Correlation Heatmap\n",
    "    html.Div([\n",
    "        html.H2(\"Correlation Heatmap\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Graph(id=\"correlation_heatmap\"),\n",
    "    ]),\n",
    "\n",
    "    # Number of Properties Built Per Year\n",
    "    html.Div([\n",
    "        html.H2(\"Number of Properties Built Per Year\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Graph(id=\"year_built_histogram\"),\n",
    "    ]),\n",
    "])\n",
    "\n",
    "# Callbacks\n",
    "@app.callback(\n",
    "    Output(\"heatmap\", \"figure\"),\n",
    "    Input(\"heatmap\", \"id\")\n",
    ")\n",
    "def update_heatmap(_):\n",
    "    avg_price_by_year_month = data.groupby(['YrSold', 'MoSold'])['SalePrice'].mean().reset_index()\n",
    "    avg_price_by_year_month_pivot = avg_price_by_year_month.pivot(index='YrSold', columns='MoSold', values='SalePrice')\n",
    "    fig = px.imshow(\n",
    "        avg_price_by_year_month_pivot,\n",
    "        color_continuous_scale=\"Spectral\",\n",
    "        labels={\"color\": \"Average SalePrice\"},\n",
    "        title=\"Average SalePrice by Year and Month\"\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"scatter_plot\", \"figure\"),\n",
    "    Input(\"neighborhood_filter\", \"value\")\n",
    ")\n",
    "def update_scatter(neighborhoods):\n",
    "    filtered_data = data if not neighborhoods else data[data['Neighborhood'].isin(neighborhoods)]\n",
    "    fig = px.scatter(\n",
    "        filtered_data, x=\"GrLivArea\", y=\"SalePrice\", color=\"SalePrice\",\n",
    "        color_continuous_scale=\"Spectral\", title=\"Living Area vs. SalePrice\",\n",
    "        labels={\"GrLivArea\": \"Living Area (sqft)\", \"SalePrice\": \"Sale Price\"}\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"boxplot\", \"figure\"),\n",
    "    Input(\"year_filter\", \"value\")\n",
    ")\n",
    "def update_boxplot(year):\n",
    "    filtered_data = data[data['YearBuilt'] <= year]\n",
    "    fig = px.box(\n",
    "        filtered_data, x=\"OverallQual\", y=\"SalePrice\", points=\"all\", color_discrete_sequence=px.colors.qualitative.Set2, title=\"SalePrice by Overall Quality\",\n",
    "        labels={\"OverallQual\": \"Overall Quality\", \"SalePrice\": \"Sale Price\"}\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"neighborhood_bar_chart\", \"figure\"),\n",
    "    Input(\"neighborhood_bar_chart\", \"id\")\n",
    ")\n",
    "def update_neighborhood_chart(_):\n",
    "    avg_price_by_neighborhood = data.groupby('Neighborhood')['SalePrice'].mean().sort_values(ascending=False)\n",
    "    fig = px.bar(\n",
    "        avg_price_by_neighborhood,\n",
    "        orientation=\"h\",\n",
    "        labels={\"value\": \"Average SalePrice\", \"index\": \"Neighborhood\"},\n",
    "        title=\"Average SalePrice by Neighborhood\",\n",
    "        color=avg_price_by_neighborhood.values,\n",
    "        color_continuous_scale=\"Spectral\"\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\", yaxis=dict(autorange=\"reversed\"))\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"garage_boxplot\", \"figure\"),\n",
    "    Input(\"garage_boxplot\", \"id\")\n",
    ")\n",
    "def update_garage_boxplot(_):\n",
    "    fig = px.box(\n",
    "        data, x=\"GarageType\", y=\"SalePrice\", color=\"GarageType\",\n",
    "        title=\"SalePrice by Garage Type\",\n",
    "        labels={\"GarageType\": \"Garage Type\", \"SalePrice\": \"Sale Price\"},\n",
    "        color_discrete_sequence=px.colors.qualitative.Set2\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"building_type_boxplot\", \"figure\"),\n",
    "    Input(\"building_type_boxplot\", \"id\")\n",
    ")\n",
    "def update_building_type_boxplot(_):\n",
    "    fig = px.box(\n",
    "        data, x=\"BldgType\", y=\"SalePrice\", color=\"BldgType\",\n",
    "        title=\"SalePrice by Building Type\",\n",
    "        labels={\"BldgType\": \"Building Type\", \"SalePrice\": \"Sale Price\"},\n",
    "        color_discrete_sequence=px.colors.qualitative.Set3\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"house_style_boxplot\", \"figure\"),\n",
    "    Input(\"house_style_boxplot\", \"id\")\n",
    ")\n",
    "def update_house_style_boxplot(_):\n",
    "    fig = px.box(\n",
    "        data, x=\"HouseStyle\", y=\"SalePrice\", color=\"HouseStyle\",\n",
    "        title=\"SalePrice by House Style\",\n",
    "        labels={\"HouseStyle\": \"House Style\", \"SalePrice\": \"Sale Price\"},\n",
    "        color_discrete_sequence=px.colors.qualitative.Pastel\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"renovation_price_impact\", \"figure\"),\n",
    "    Input(\"renovation_price_impact\", \"id\")\n",
    ")\n",
    "def update_renovation_price_impact(_):\n",
    "    fig = px.box(\n",
    "        data, x=\"Renovated\", y=\"SalePrice\", color=\"Renovated\",\n",
    "        title=\"Price Impact of Renovations\",\n",
    "        labels={\"Renovated\": \"Renovated\", \"SalePrice\": \"Sale Price\"},\n",
    "        color_discrete_sequence=px.colors.qualitative.Bold\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"neighborhood_map\", \"figure\"),\n",
    "    Input(\"neighborhood_map\", \"id\")\n",
    ")\n",
    "def update_neighborhood_map(_):\n",
    "    fig = px.scatter_mapbox(\n",
    "        data, lat=\"Latitude\", lon=\"Longitude\", size=\"SalePrice\", color=\"SalePrice\",\n",
    "        hover_name=\"Neighborhood\", zoom=10,\n",
    "        title=\"Neighborhood Map: SalePrice Distribution\",\n",
    "        color_continuous_scale=\"Viridis\"\n",
    "    )\n",
    "    fig.update_layout(\n",
    "        mapbox_style=\"open-street-map\",\n",
    "        plot_bgcolor=\"#F5F5DC\",\n",
    "        title_font_color=\"#4B0082\"\n",
    "    )\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"correlation_heatmap\", \"figure\"),\n",
    "    Input(\"correlation_heatmap\", \"id\")\n",
    ")\n",
    "def update_correlation_heatmap(_):\n",
    "    numeric_data = data.select_dtypes(include=['float64', 'int64'])\n",
    "    corr_matrix = numeric_data.corr()\n",
    "    fig = px.imshow(\n",
    "        corr_matrix,\n",
    "        text_auto=True,\n",
    "        color_continuous_scale=\"Spectral\",\n",
    "        title=\"Feature Correlation Heatmap\"\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"year_built_histogram\", \"figure\"),\n",
    "    Input(\"year_built_histogram\", \"id\")\n",
    ")\n",
    "def update_year_built_histogram(_):\n",
    "    fig = px.histogram(\n",
    "        data, x=\"YearBuilt\", nbins=30, color_discrete_sequence=[\"#2E8B57\"],\n",
    "        title=\"Number of Properties Built Per Year\",\n",
    "        labels={\"YearBuilt\": \"Year Built\", \"count\": \"Number of Properties\"}\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "# Run the app\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cb0f5cd0-5249-40cf-8d09-71c96ce16bbc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x16b2d08c0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import dash\n",
    "from dash import dcc, html, Input, Output\n",
    "import plotly.express as px\n",
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "data_path = \"/Users/tanishq/Desktop/Projects/home-data-for-ml-course/train.csv\"\n",
    "data = pd.read_csv(data_path)\n",
    "\n",
    "# Prepare data for the visualizations\n",
    "data['LotFrontageAvailable'] = data['LotFrontage'].notnull().map({True: 'Available', False: 'Missing'})\n",
    "data['Renovated'] = data['YearBuilt'] != data['YearRemodAdd']\n",
    "\n",
    "# Sample latitude and longitude data for neighborhoods (mock data for visualization purposes)\n",
    "# Replace this with actual geospatial data if available\n",
    "data['Latitude'] = data['Neighborhood'].map({\n",
    "    'CollgCr': 42.025, 'Veenker': 42.030, 'Crawfor': 42.022,\n",
    "    'NoRidge': 42.050, 'Mitchel': 42.018, 'Somerst': 42.031,\n",
    "    'NWAmes': 42.040, 'OldTown': 42.016, 'BrkSide': 42.012,\n",
    "    'Sawyer': 42.025, 'IDOTRR': 42.007, 'MeadowV': 42.010,\n",
    "    'Edwards': 42.017, 'Timber': 42.042, 'Gilbert': 42.080,\n",
    "    'StoneBr': 42.055, 'ClearCr': 42.045, 'NPkVill': 42.036,\n",
    "    'Blmngtn': 42.062, 'Blueste': 42.065, 'SawyerW': 42.028,\n",
    "    'SWISU': 42.013, 'NridgHt': 42.054, 'NAmes': 42.053,\n",
    "    'Names': 42.050, 'Brookside': 42.015, 'Other': 42.000\n",
    "})\n",
    "data['Longitude'] = data['Neighborhood'].map({\n",
    "    'CollgCr': -93.655, 'Veenker': -93.650, 'Crawfor': -93.670,\n",
    "    'NoRidge': -93.635, 'Mitchel': -93.685, 'Somerst': -93.645,\n",
    "    'NWAmes': -93.680, 'OldTown': -93.630, 'BrkSide': -93.620,\n",
    "    'Sawyer': -93.625, 'IDOTRR': -93.610, 'MeadowV': -93.600,\n",
    "    'Edwards': -93.640, 'Timber': -93.690, 'Gilbert': -93.750,\n",
    "    'StoneBr': -93.630, 'ClearCr': -93.670, 'NPkVill': -93.665,\n",
    "    'Blmngtn': -93.690, 'Blueste': -93.700, 'SawyerW': -93.645,\n",
    "    'SWISU': -93.620, 'NridgHt': -93.640, 'NAmes': -93.675,\n",
    "    'Names': -93.660, 'Brookside': -93.615, 'Other': -93.590\n",
    "})\n",
    "\n",
    "# Initialize the app\n",
    "app = dash.Dash(__name__)\n",
    "app.title = \"Real Estate Dashboard\"\n",
    "\n",
    "# Layout\n",
    "app.layout = html.Div([\n",
    "    html.H1(\"Real Estate Interactive Dashboard\", style={\"textAlign\": \"center\", \"color\": \"#4B0082\"}),\n",
    "\n",
    "    # SalePrice Over Time Heatmap\n",
    "    html.Div([\n",
    "        html.H2(\"SalePrice Over Time (Year vs. Month)\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Graph(id=\"heatmap\"),\n",
    "    ]),\n",
    "\n",
    "    # Living Area vs. SalePrice\n",
    "    html.Div([\n",
    "        html.H2(\"Living Area vs. SalePrice\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Dropdown(\n",
    "            id=\"neighborhood_filter\",\n",
    "            options=[{\"label\": n, \"value\": n} for n in data['Neighborhood'].unique()],\n",
    "            placeholder=\"Select a Neighborhood\",\n",
    "            multi=True\n",
    "        ),\n",
    "        dcc.Graph(id=\"scatter_plot\"),\n",
    "    ]),\n",
    "\n",
    "    # Overall Quality vs. SalePrice\n",
    "    html.Div([\n",
    "        html.H2(\"Overall Quality vs. SalePrice\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Slider(\n",
    "            id=\"year_filter\",\n",
    "            min=data['YearBuilt'].min(),\n",
    "            max=data['YearBuilt'].max(),\n",
    "            step=1,\n",
    "            value=data['YearBuilt'].max(),\n",
    "            marks={str(year): str(year) for year in range(data['YearBuilt'].min(), data['YearBuilt'].max()+1, 10)},\n",
    "        ),\n",
    "        dcc.Graph(id=\"boxplot\"),\n",
    "    ]),\n",
    "\n",
    "    # Average SalePrice by Neighborhood\n",
    "    html.Div([\n",
    "        html.H2(\"Average SalePrice by Neighborhood\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Graph(id=\"neighborhood_bar_chart\"),\n",
    "    ]),\n",
    "\n",
    "    # SalePrice Distribution by Garage Type\n",
    "    html.Div([\n",
    "        html.H2(\"SalePrice Distribution by Garage Type\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Graph(id=\"garage_boxplot\"),\n",
    "    ]),\n",
    "\n",
    "    # SalePrice Distribution by Building Type\n",
    "    html.Div([\n",
    "        html.H2(\"SalePrice Distribution by Building Type\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Graph(id=\"building_type_boxplot\"),\n",
    "    ]),\n",
    "\n",
    "    # SalePrice by House Style\n",
    "    html.Div([\n",
    "        html.H2(\"SalePrice by House Style\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Graph(id=\"house_style_boxplot\"),\n",
    "    ]),\n",
    "\n",
    "    # Price Impact of Renovations\n",
    "    html.Div([\n",
    "        html.H2(\"Price Impact of Renovations\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Graph(id=\"renovation_price_impact\"),\n",
    "    ]),\n",
    "\n",
    "    # Neighborhood Map\n",
    "    html.Div([\n",
    "        html.H2(\"Neighborhood Map\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Dropdown(\n",
    "            id=\"map_neighborhood_filter\",\n",
    "            options=[{\"label\": n, \"value\": n} for n in data['Neighborhood'].unique()],\n",
    "            placeholder=\"Filter by Neighborhood\",\n",
    "            multi=True\n",
    "        ),\n",
    "        dcc.Graph(id=\"neighborhood_map\"),\n",
    "    ]),\n",
    "\n",
    "    # Correlation Heatmap\n",
    "    html.Div([\n",
    "        html.H2(\"Correlation Heatmap\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Graph(id=\"correlation_heatmap\"),\n",
    "    ]),\n",
    "\n",
    "    # Number of Properties Built Per Year\n",
    "    html.Div([\n",
    "        html.H2(\"Number of Properties Built Per Year\", style={\"color\": \"#4B0082\"}),\n",
    "        dcc.Graph(id=\"year_built_histogram\"),\n",
    "    ]),\n",
    "\n",
    "    # Renovation Trends\n",
    "html.Div([\n",
    "    html.H2(\"Yearly Renovation Trends\", style={\"color\": \"#4B0082\"}),\n",
    "    dcc.Graph(id=\"renovation_trend_bar\"),\n",
    "    ]),\n",
    "\n",
    "])\n",
    "\n",
    "# Callbacks\n",
    "@app.callback(\n",
    "    Output(\"heatmap\", \"figure\"),\n",
    "    Input(\"heatmap\", \"id\")\n",
    ")\n",
    "def update_heatmap(_):\n",
    "    avg_price_by_year_month = data.groupby(['YrSold', 'MoSold'])['SalePrice'].mean().reset_index()\n",
    "    avg_price_by_year_month_pivot = avg_price_by_year_month.pivot(index='YrSold', columns='MoSold', values='SalePrice')\n",
    "    fig = px.imshow(\n",
    "        avg_price_by_year_month_pivot,\n",
    "        color_continuous_scale=\"Spectral\",\n",
    "        labels={\"color\": \"Average SalePrice\"},\n",
    "        title=\"Average SalePrice by Year and Month\"\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"scatter_plot\", \"figure\"),\n",
    "    Input(\"neighborhood_filter\", \"value\")\n",
    ")\n",
    "def update_scatter(neighborhoods):\n",
    "    filtered_data = data if not neighborhoods else data[data['Neighborhood'].isin(neighborhoods)]\n",
    "    fig = px.scatter(\n",
    "        filtered_data, x=\"GrLivArea\", y=\"SalePrice\", color=\"SalePrice\",\n",
    "        color_continuous_scale=\"Spectral\", title=\"Living Area vs. SalePrice\",\n",
    "        labels={\"GrLivArea\": \"Living Area (sqft)\", \"SalePrice\": \"Sale Price\"}\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"boxplot\", \"figure\"),\n",
    "    Input(\"year_filter\", \"value\")\n",
    ")\n",
    "def update_boxplot(year):\n",
    "    filtered_data = data[data['YearBuilt'] <= year]\n",
    "    fig = px.box(\n",
    "        filtered_data, x=\"OverallQual\", y=\"SalePrice\", points=\"all\", color_discrete_sequence=px.colors.qualitative.Set2, title=\"SalePrice by Overall Quality\",\n",
    "        labels={\"OverallQual\": \"Overall Quality\", \"SalePrice\": \"Sale Price\"}\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"neighborhood_bar_chart\", \"figure\"),\n",
    "    Input(\"neighborhood_bar_chart\", \"id\")\n",
    ")\n",
    "def update_neighborhood_chart(_):\n",
    "    avg_price_by_neighborhood = data.groupby('Neighborhood')['SalePrice'].mean().sort_values(ascending=False)\n",
    "    fig = px.bar(\n",
    "        avg_price_by_neighborhood,\n",
    "        orientation=\"h\",\n",
    "        labels={\"value\": \"Average SalePrice\", \"index\": \"Neighborhood\"},\n",
    "        title=\"Average SalePrice by Neighborhood\",\n",
    "        color=avg_price_by_neighborhood.values,\n",
    "        color_continuous_scale=\"Spectral\"\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\", yaxis=dict(autorange=\"reversed\"))\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"garage_boxplot\", \"figure\"),\n",
    "    Input(\"garage_boxplot\", \"id\")\n",
    ")\n",
    "def update_garage_boxplot(_):\n",
    "    fig = px.box(\n",
    "        data, x=\"GarageType\", y=\"SalePrice\", color=\"GarageType\",\n",
    "        title=\"SalePrice by Garage Type\",\n",
    "        labels={\"GarageType\": \"Garage Type\", \"SalePrice\": \"Sale Price\"},\n",
    "        color_discrete_sequence=px.colors.qualitative.Set2\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"building_type_boxplot\", \"figure\"),\n",
    "    Input(\"building_type_boxplot\", \"id\")\n",
    ")\n",
    "def update_building_type_boxplot(_):\n",
    "    fig = px.box(\n",
    "        data, x=\"BldgType\", y=\"SalePrice\", color=\"BldgType\",\n",
    "        title=\"SalePrice by Building Type\",\n",
    "        labels={\"BldgType\": \"Building Type\", \"SalePrice\": \"Sale Price\"},\n",
    "        color_discrete_sequence=px.colors.qualitative.Set3\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"house_style_boxplot\", \"figure\"),\n",
    "    Input(\"house_style_boxplot\", \"id\")\n",
    ")\n",
    "def update_house_style_boxplot(_):\n",
    "    fig = px.box(\n",
    "        data, x=\"HouseStyle\", y=\"SalePrice\", color=\"HouseStyle\",\n",
    "        title=\"SalePrice by House Style\",\n",
    "        labels={\"HouseStyle\": \"House Style\", \"SalePrice\": \"Sale Price\"},\n",
    "        color_discrete_sequence=px.colors.qualitative.Pastel\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"renovation_price_impact\", \"figure\"),\n",
    "    Input(\"renovation_price_impact\", \"id\")\n",
    ")\n",
    "def update_renovation_price_impact(_):\n",
    "    fig = px.box(\n",
    "        data, x=\"Renovated\", y=\"SalePrice\", color=\"Renovated\",\n",
    "        title=\"Price Impact of Renovations\",\n",
    "        labels={\"Renovated\": \"Renovated\", \"SalePrice\": \"Sale Price\"},\n",
    "        color_discrete_sequence=px.colors.qualitative.Bold\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"renovation_trend_bar\", \"figure\"),\n",
    "    Input(\"renovation_trend_bar\", \"id\")\n",
    ")\n",
    "def update_renovation_trend_bar(_):\n",
    "    renovation_counts = data[data[\"Renovated\"]].groupby(\"YearRemodAdd\").size().reset_index(name=\"Count\")\n",
    "    fig = px.bar(\n",
    "        renovation_counts, x=\"YearRemodAdd\", y=\"Count\",\n",
    "        title=\"Yearly Renovation Count\",\n",
    "        labels={\"YearRemodAdd\": \"Year of Renovation\", \"Count\": \"Number of Renovations\"},\n",
    "        color=\"Count\",\n",
    "        color_continuous_scale=\"Viridis\"\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"neighborhood_map\", \"figure\"),\n",
    "    Input(\"map_neighborhood_filter\", \"value\")\n",
    ")\n",
    "\n",
    "def update_neighborhood_map(selected_neighborhoods):\n",
    "    filtered_data = data if not selected_neighborhoods else data[data['Neighborhood'].isin(selected_neighborhoods)]\n",
    "    fig = px.scatter_mapbox(\n",
    "        filtered_data, lat=\"Latitude\", lon=\"Longitude\", size=\"SalePrice\", color=\"SalePrice\",\n",
    "        hover_name=\"Neighborhood\", zoom=10,\n",
    "        title=\"Neighborhood Map: SalePrice Distribution\",\n",
    "        color_continuous_scale=\"Viridis\"\n",
    "    )\n",
    "    fig.update_layout(\n",
    "        mapbox_style=\"open-street-map\",\n",
    "        plot_bgcolor=\"#F5F5DC\",\n",
    "        title_font_color=\"#4B0082\"\n",
    "    )\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"correlation_heatmap\", \"figure\"),\n",
    "    Input(\"correlation_heatmap\", \"id\")\n",
    ")\n",
    "def update_correlation_heatmap(_):\n",
    "    numeric_data = data.select_dtypes(include=['float64', 'int64'])\n",
    "    corr_matrix = numeric_data.corr()\n",
    "    fig = px.imshow(\n",
    "        corr_matrix,\n",
    "        text_auto=True,\n",
    "        color_continuous_scale=\"Spectral\",\n",
    "        title=\"Feature Correlation Heatmap\"\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"year_built_histogram\", \"figure\"),\n",
    "    Input(\"year_built_histogram\", \"id\")\n",
    ")\n",
    "def update_year_built_histogram(_):\n",
    "    fig = px.histogram(\n",
    "        data, x=\"YearBuilt\", nbins=30, color_discrete_sequence=[\"#2E8B57\"],\n",
    "        title=\"Number of Properties Built Per Year\",\n",
    "        labels={\"YearBuilt\": \"Year Built\", \"count\": \"Number of Properties\"}\n",
    "    )\n",
    "    fig.update_layout(plot_bgcolor=\"#F5F5DC\", title_font_color=\"#4B0082\")\n",
    "    return fig\n",
    "\n",
    "# Run the app\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7660dbd7-5c24-4f24-9992-f3136c0c2d1f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
